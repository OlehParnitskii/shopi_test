{% assign products_per_row = section.settings.grid | times: 1 %}

{% case products_per_row %}
	{% when 2 %}
		{%- assign max_height = 530 -%}
		{%- assign grid_item_width = 'medium-up--one-half' -%}
	{% when 3 %}
		{%- assign max_height = 345 -%}
		{%- assign grid_item_width = 'small--one-half medium-up--one-third' -%}
	{% when 4 %}
		{%- assign max_height = 250 -%}
		{%- assign grid_item_width = 'small--one-half medium-up--one-quarter' -%}
	{% when 5 %}
		{%- assign max_height = 195 -%}
		{%- assign grid_item_width = 'small--one-half medium-up--one-fifth' -%}
{% endcase %}


	{%- assign limit = 9 -%}


{% paginate collection.products by limit %}

<div data-section-id="{{ section.id }}" data-section-type="collection-template">
	<header class="collection-header">
		{% if section.settings.show_collection_image and collection.image %}
			<div class="collection-hero">
				<div class="collection-hero__image ratio-container lazyload js"
						 data-bgset="{% include 'bgset', image: collection.image %}"
						 data-sizes="auto"
						 data-parent-fit="cover"
						 style="background-image: url('{{ collection.image | img_url: '300x300' }});"></div>
				<noscript>
					<div class="collection-hero__image" style="background-image: url({{ collection.image | img_url: '2048x600', crop: 'top' }});"></div>
				</noscript>
				<div class="collection-hero__title-wrapper">
					<h1 class="boost-pfs-filter-collection-header collection-hero__title page-width">{{ collection.title }}</h1>
				</div>
			</div>
			{% if collection.description != blank %}
				<div class="boost-pfs-filter-collection-description rte collection-description page-width">
					{{ collection.description }}
				</div>
			{% endif %}
		{% else %}
			<div class="page-width">
				<div class="section-header text-center">
					<h1 class="boost-pfs-filter-collection-header">
						<span role="text">
							<span class="visually-hidden">{{ 'collections.general.collection_label' | t }}: </span>
							{{ collection.title }}
						</span>
					</h1>
					{% if collection.description != blank %}
						<div class="boost-pfs-filter-collection-description rte">
							{{ collection.description }}
						</div>
					{% endif %}
				</div>
			</div>
		{% endif %}

		<div class="filters-toolbar-wrapper">
			<div class="page-width">
				<div class="filters-toolbar">
					<div class="filters-toolbar__item-wrapper">
						{% if section.settings.sort_enable %}
							<div class="filters-toolbar__item-child boost-pfs-filter-top-sorting">
								{% include 'boost-pfs-filter-skeleton', width: 2 %}
							</div>
						{% endif %}
					</div>

					<div class="filters-toolbar__item filters-toolbar__item--count">
						<span class="filters-toolbar__product-count boost-pfs-filter-total-product">{% include 'boost-pfs-filter-skeleton', width: 2 %}</span>
					</div>
				</div>
			</div>
		</div>
	</header>

	<div class="page-width" id="Collection">
		<div class="boost-pfs-filter-tree-mobile-button">
			{% include 'boost-pfs-filter-skeleton', type: 'button' %}
		</div>

		<div class="boost-pfs-filter-wrapper">
			<div class="boost-pfs-filter-tree boost-pfs-filter-tree-v">
				{% include 'boost-pfs-filter-skeleton', type: 'filter-tree' %}
			</div>

			<div class="boost-pfs-filter-right">

					<div class="boost-pfs-filter-products grid grid--uniform{% if collection.products_count > 0 %} grid--view-items{% endif %}" data-bc-sort="{{ collection.default_sort_by }}" data-template="{{ template }}">
						{% for product in collection.products %}
							<div class="grid__item grid__item--{{section.id}}">
								{% include 'product-card-grid'%}
							</div>
						{% endfor %}
					</div>


				<div class="boost-pfs-filter-bottom-pagination">
					{% if paginate.pages > 1 %}
						{% include 'pagination' %}
					{% endif %}
				</div>
				<div class="boost-pfs-filter-load-more"></div>
			</div>
		</div>

	</div>
</div>


{% endpaginate %}

<script>
	// Declare bcSfFilterConfig variable
	var boostPFSThemeConfig = {
		label: {
			sorting: {% assign temp = 'collections.sorting.title' | t  %} {% unless temp contains 'translation missing'  %} {{ temp | json }} {% else %} "Sorting" {% endunless %},
			sorting_best_selling: {% assign temp = collection.sort_options[1].name %} {% unless temp == nil %} {{ temp | json }} {% else %} "Best Selling" {% endunless %},
			sorting_featured: {% assign temp = collection.sort_options[0].name %} {% unless temp == nil %} {{ temp | json }} {% else %} "Featured" {% endunless %},
			sorting_title_ascending: {% assign temp = collection.sort_options[2].name %} {% unless temp == nil %} {{ temp | json }} {% else %} "Alphabetically, A-Z" {% endunless %},
			sorting_title_descending: {% assign temp = collection.sort_options[3].name %} {% unless temp == nil %} {{ temp | json }} {% else %} "Alphabetically, Z-A" {% endunless %},
			sorting_price_ascending: {% assign temp = collection.sort_options[4].name %} {% unless temp == nil %} {{ temp | json }} {% else %} "Lowest Price" {% endunless %},
			sorting_price_descending: {% assign temp = collection.sort_options[5].name %} {% unless temp == nil %} {{ temp | json }} {% else %} "Highest Price" {% endunless %},
			sorting_date_ascending: {% assign temp = collection.sort_options[6].name %} {% unless temp == nil  %} {{ temp | json }} {% else %} "Date, Old to New" {% endunless %},
			sorting_date_descending: {% assign temp = collection.sort_options[7].name %} {% unless temp == nil  %} {{ temp | json }} {% else %} "Date, New to Old" {% endunless %},
			sorting_relevance: {% assign temp = 'collections.sorting.relevance' | t %} {% unless temp contains 'translation missing'  %} {{ temp | json }} {% else %} "Relevance" {% endunless %},

			sale: {{ 'products.product.on_sale' | t | default: '' | json }},
			sale_price: {{ 'products.product.sale_price' | t | default: '' | json }},
			sold_out: {{ 'products.product.sold_out' | t | default: '' | json }},
			vendor: {{ 'products.product.vendor' | t |default: '' | json }},
			regular_price: {{ 'products.product.regular_price' | t | default: '' | json }},
			items_with_count_one: {{ 'collections.general.items_with_count.one' | t | default: '' | json}},
			items_with_count_other: {{ 'collections.general.items_with_count.other' | t | default: '' | json }},
			current_page: {{ 'general.pagination.current_page' | t | json }},
          	from_lowest_price_html: {{ 'products.product.from_lowest_price_html' | t | default: '' | json }},
          	unit_price_label: {{ 'products.product.unit_price_label' | t | json }},
          	unit_price_separator: {{ 'general.accessibility.unit_price_separator' | t | default: '' | json }}
		},
		custom: {
			products_per_page: {% if limit %} {{ limit | json }} {% else %} 24 {% endif %},
			products_per_row: {% if products_per_row %} {{ products_per_row }} {% else %} 4 {% endif %},
			product_grid_class: {% if grid_item_width %} 'grid__item {{ grid_item_width }}' {% else %} 'grid__item small--one-half medium-up--one-quarter' {% endif %},
			max_height: {% if max_height %} {{ max_height | json }} {% else %} 250 {% endif %},
			vendor_enable: {% if section.settings.show_vendor %} {{ section.settings.show_vendor | json }} {% else %} false {% endif %},
			layout: {% if section.settings.layout %} {{ section.settings.layout | json }} {% else %} "grid" {% endif %}
		}
	};

	var boostPFSTemplate = {
		'soldOutClass': 'product-price--sold-out grid-view-item--sold-out',

		// Grid Template
		'vendorGridHtml': {% render 'boost-pfs-filter-html', layout: 'vendorGridHtml' %},
		'soldOutLabelGridHtml': {% render 'boost-pfs-filter-html', layout: 'soldOutLabelGridHtml' %},
		'productGridItemHtml': {% render 'boost-pfs-filter-html', layout: 'productGridItemHtml' %},
		// List Template
		'vendorSmallListHtml': {% render 'boost-pfs-filter-html', layout: 'vendorSmallListHtml' %},
		'vendorMediumListHtml': {% render 'boost-pfs-filter-html', layout: 'vendorMediumListHtml' %},
		'saleLabelListHtml': {% render 'boost-pfs-filter-html', layout: 'saleLabelListHtml' %},
		'soldOutLabelListHtml': {% render 'boost-pfs-filter-html', layout: 'soldOutLabelListHtml' %},
		'productListItemHtml':  {% render 'boost-pfs-filter-html', layout: 'productListItemHtml' %},

			// Pagination Template
		'previousActiveHtml': {% render 'boost-pfs-filter-html', layout: 'previousActiveHtml' %},
		'previousDisabledHtml': {% render 'boost-pfs-filter-html', layout: 'previousDisabledHtml' %},
		'nextActiveHtml': {% render 'boost-pfs-filter-html', layout: 'nextActiveHtml' %},
		'nextDisabledHtml': {% render 'boost-pfs-filter-html', layout: 'nextDisabledHtml' %},
		'paginateHtml': {% render 'boost-pfs-filter-html', layout: 'paginateHtml' %},

		// Sorting Template
		'sortingHtml': {% render 'boost-pfs-filter-html', layout: 'sortingHtml' %},
	};
</script>
{% schema %}

{
"name": {

"en": "Collection pages"
},
"settings": [

{
"type": "checkbox",
"id": "show_tag_filtr",
"label": {

"en": "Show tag filter"
},
"default": true
},
{
"type": "checkbox",
"id": "show_filtr",
"label": {

"en": "Show filter"
},
"default": true
},
{
"type": "checkbox",
"id": "show_grid",
"label": {

"en": "Show check product grid"
},
"default": true
},
{
"type": "checkbox",
"id": "show_limit_pagination",
"label": {

"en": "Show check limit pagination"
},
"default": true
}


]
}
{% endschema %}
